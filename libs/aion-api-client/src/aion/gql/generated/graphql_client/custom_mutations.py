# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    AgentEnvironmentFields,
    AgentIdentityFields,
    CreateLocalDeploymentResponseFields,
)
from .custom_typing_fields import JSONRPCResponseUnion
from .input_types import JSONRPCRequestInput


class Mutation:
    @classmethod
    def update_agent_identity(
        cls,
        agent_identity_id: str,
        *,
        at_name: Optional[str] = None,
        biography: Optional[str] = None,
        avatar_image_url: Optional[str] = None,
        background_image_url: Optional[str] = None
    ) -> AgentIdentityFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "agentIdentityId": {"type": "ID!", "value": agent_identity_id},
            "atName": {"type": "String", "value": at_name},
            "biography": {"type": "String", "value": biography},
            "avatarImageUrl": {"type": "String", "value": avatar_image_url},
            "backgroundImageUrl": {"type": "String", "value": background_image_url},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AgentIdentityFields(
            field_name="updateAgentIdentity", arguments=cleared_arguments
        )

    @classmethod
    def update_agent_environment(
        cls,
        agent_environment_id: str,
        *,
        name: Optional[str] = None,
        configuration_variables: Optional[Any] = None,
        use_long_term_memory: Optional[bool] = None,
        system_prompt: Optional[str] = None
    ) -> AgentEnvironmentFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "agentEnvironmentId": {"type": "ID!", "value": agent_environment_id},
            "name": {"type": "String", "value": name},
            "configurationVariables": {
                "type": "Json",
                "value": configuration_variables,
            },
            "useLongTermMemory": {"type": "Boolean", "value": use_long_term_memory},
            "systemPrompt": {"type": "String", "value": system_prompt},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AgentEnvironmentFields(
            field_name="updateAgentEnvironment", arguments=cleared_arguments
        )

    @classmethod
    def create_local_deployment(
        cls, name: str, server_url: str
    ) -> CreateLocalDeploymentResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name},
            "serverUrl": {"type": "String!", "value": server_url},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateLocalDeploymentResponseFields(
            field_name="createLocalDeployment", arguments=cleared_arguments
        )

    @classmethod
    def a_2_a_send(
        cls, request: JSONRPCRequestInput, distribution_id: str
    ) -> JSONRPCResponseUnion:
        arguments: Dict[str, Dict[str, Any]] = {
            "request": {"type": "JSONRPCRequestInput!", "value": request},
            "distributionId": {"type": "ID!", "value": distribution_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return JSONRPCResponseUnion(field_name="a2aSend", arguments=cleared_arguments)
