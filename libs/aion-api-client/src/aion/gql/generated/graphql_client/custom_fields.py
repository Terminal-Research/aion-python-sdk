# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from .base_operation import GraphQLField
from .custom_typing_fields import (
    AgentBehaviorGraphQLField,
    AgentEnvironmentGraphQLField,
    AgentIdentityGraphQLField,
    ClientSecretGraphQLField,
    ClientSecretHashGraphQLField,
    CreateLocalDeploymentResponseGraphQLField,
    DeploymentEnvironmentGraphQLField,
    DeploymentGraphQLField,
    JSONRPCErrorGraphQLField,
    JSONRPCErrorResponseGraphQLField,
    JSONRPCSuccessResponseGraphQLField,
    KVStringStringGraphQLField,
    MemorySpaceGraphQLField,
    UserGraphQLField,
    UserNetworkGraphQLField,
    VersionGraphQLField,
)


class AgentBehaviorFields(GraphQLField):
    id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField("id")
    user_id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField("userId")
    deployment_type: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField(
        "deploymentType"
    )
    deployment_id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField(
        "deploymentId"
    )
    version_id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField("versionId")
    langgraph_assistant_id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField(
        "langgraphAssistantId"
    )

    def fields(self, *subfields: AgentBehaviorGraphQLField) -> "AgentBehaviorFields":
        """Subfields should come from the AgentBehaviorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AgentBehaviorFields":
        self._alias = alias
        return self


class AgentEnvironmentFields(GraphQLField):
    id: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField("id")
    user_id: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField("userId")
    name: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField("name")

    @classmethod
    def configuration_variables(cls) -> "KVStringStringFields":
        return KVStringStringFields("configuration_variables")

    use_long_term_memory: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField(
        "useLongTermMemory"
    )
    system_prompt: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField(
        "systemPrompt"
    )

    def fields(
        self, *subfields: Union[AgentEnvironmentGraphQLField, "KVStringStringFields"]
    ) -> "AgentEnvironmentFields":
        """Subfields should come from the AgentEnvironmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AgentEnvironmentFields":
        self._alias = alias
        return self


class AgentIdentityFields(GraphQLField):
    id: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("id")
    agent_type: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("agentType")
    user_id: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("userId")
    organization_id: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField(
        "organizationId"
    )
    at_name: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("atName")
    biography: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("biography")
    avatar_image_url: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField(
        "avatarImageUrl"
    )
    background_image_url: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField(
        "backgroundImageUrl"
    )

    def fields(self, *subfields: AgentIdentityGraphQLField) -> "AgentIdentityFields":
        """Subfields should come from the AgentIdentityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AgentIdentityFields":
        self._alias = alias
        return self


class ClientSecretFields(GraphQLField):
    client_id: "ClientSecretGraphQLField" = ClientSecretGraphQLField("clientId")
    secret: "ClientSecretGraphQLField" = ClientSecretGraphQLField("secret")

    def fields(self, *subfields: ClientSecretGraphQLField) -> "ClientSecretFields":
        """Subfields should come from the ClientSecretFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClientSecretFields":
        self._alias = alias
        return self


class ClientSecretHashFields(GraphQLField):
    id: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField("id")
    client_id: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField("clientId")
    secret_hash: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField(
        "secretHash"
    )
    subject_type: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField(
        "subjectType"
    )
    subject_id: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField(
        "subjectId"
    )

    def fields(
        self, *subfields: ClientSecretHashGraphQLField
    ) -> "ClientSecretHashFields":
        """Subfields should come from the ClientSecretHashFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClientSecretHashFields":
        self._alias = alias
        return self


class CreateLocalDeploymentResponseFields(GraphQLField):
    @classmethod
    def deployment(cls) -> "DeploymentFields":
        return DeploymentFields("deployment")

    @classmethod
    def environment(cls) -> "DeploymentEnvironmentFields":
        return DeploymentEnvironmentFields("environment")

    @classmethod
    def version(cls) -> "VersionFields":
        return VersionFields("version")

    @classmethod
    def client_secret_hash(cls) -> "ClientSecretHashFields":
        return ClientSecretHashFields("client_secret_hash")

    @classmethod
    def client_secret(cls) -> "ClientSecretFields":
        return ClientSecretFields("client_secret")

    def fields(
        self,
        *subfields: Union[
            CreateLocalDeploymentResponseGraphQLField,
            "ClientSecretFields",
            "ClientSecretHashFields",
            "DeploymentEnvironmentFields",
            "DeploymentFields",
            "VersionFields",
        ]
    ) -> "CreateLocalDeploymentResponseFields":
        """Subfields should come from the CreateLocalDeploymentResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateLocalDeploymentResponseFields":
        self._alias = alias
        return self


class DeploymentFields(GraphQLField):
    id: "DeploymentGraphQLField" = DeploymentGraphQLField("id")
    organization_id: "DeploymentGraphQLField" = DeploymentGraphQLField("organizationId")
    user_id: "DeploymentGraphQLField" = DeploymentGraphQLField("userId")
    repository_id: "DeploymentGraphQLField" = DeploymentGraphQLField("repositoryId")
    name: "DeploymentGraphQLField" = DeploymentGraphQLField("name")
    deployment_type: "DeploymentGraphQLField" = DeploymentGraphQLField("deploymentType")
    source_root: "DeploymentGraphQLField" = DeploymentGraphQLField("sourceRoot")
    has_auto_version_enabled: "DeploymentGraphQLField" = DeploymentGraphQLField(
        "hasAutoVersionEnabled"
    )

    def fields(self, *subfields: DeploymentGraphQLField) -> "DeploymentFields":
        """Subfields should come from the DeploymentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentFields":
        self._alias = alias
        return self


class DeploymentEnvironmentFields(GraphQLField):
    id: "DeploymentEnvironmentGraphQLField" = DeploymentEnvironmentGraphQLField("id")
    deployment_id: "DeploymentEnvironmentGraphQLField" = (
        DeploymentEnvironmentGraphQLField("deploymentId")
    )
    name: "DeploymentEnvironmentGraphQLField" = DeploymentEnvironmentGraphQLField(
        "name"
    )
    branch: "DeploymentEnvironmentGraphQLField" = DeploymentEnvironmentGraphQLField(
        "branch"
    )

    @classmethod
    def environment_variables(cls) -> "KVStringStringFields":
        return KVStringStringFields("environment_variables")

    def fields(
        self,
        *subfields: Union[DeploymentEnvironmentGraphQLField, "KVStringStringFields"]
    ) -> "DeploymentEnvironmentFields":
        """Subfields should come from the DeploymentEnvironmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentEnvironmentFields":
        self._alias = alias
        return self


class JSONRPCErrorFields(GraphQLField):
    code: "JSONRPCErrorGraphQLField" = JSONRPCErrorGraphQLField("code")
    message: "JSONRPCErrorGraphQLField" = JSONRPCErrorGraphQLField("message")
    data: "JSONRPCErrorGraphQLField" = JSONRPCErrorGraphQLField("data")

    def fields(self, *subfields: JSONRPCErrorGraphQLField) -> "JSONRPCErrorFields":
        """Subfields should come from the JSONRPCErrorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JSONRPCErrorFields":
        self._alias = alias
        return self


class JSONRPCErrorResponseFields(GraphQLField):
    id: "JSONRPCErrorResponseGraphQLField" = JSONRPCErrorResponseGraphQLField("id")

    @classmethod
    def error(cls) -> "JSONRPCErrorFields":
        return JSONRPCErrorFields("error")

    def fields(
        self, *subfields: Union[JSONRPCErrorResponseGraphQLField, "JSONRPCErrorFields"]
    ) -> "JSONRPCErrorResponseFields":
        """Subfields should come from the JSONRPCErrorResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JSONRPCErrorResponseFields":
        self._alias = alias
        return self


class JSONRPCSuccessResponseFields(GraphQLField):
    id: "JSONRPCSuccessResponseGraphQLField" = JSONRPCSuccessResponseGraphQLField("id")
    result: "JSONRPCSuccessResponseGraphQLField" = JSONRPCSuccessResponseGraphQLField(
        "result"
    )

    def fields(
        self, *subfields: JSONRPCSuccessResponseGraphQLField
    ) -> "JSONRPCSuccessResponseFields":
        """Subfields should come from the JSONRPCSuccessResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JSONRPCSuccessResponseFields":
        self._alias = alias
        return self


class KVStringStringFields(GraphQLField):
    key: "KVStringStringGraphQLField" = KVStringStringGraphQLField("key")
    value: "KVStringStringGraphQLField" = KVStringStringGraphQLField("value")

    def fields(self, *subfields: KVStringStringGraphQLField) -> "KVStringStringFields":
        """Subfields should come from the KVStringStringFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "KVStringStringFields":
        self._alias = alias
        return self


class MemorySpaceFields(GraphQLField):
    id: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("id")
    name: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("name")
    description: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("description")
    instructions: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("instructions")

    @classmethod
    def owner(cls) -> "AgentIdentityFields":
        return AgentIdentityFields("owner")

    privacy: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("privacy")

    @classmethod
    def shared_with(cls) -> "AgentIdentityFields":
        return AgentIdentityFields("shared_with")

    def fields(
        self, *subfields: Union[MemorySpaceGraphQLField, "AgentIdentityFields"]
    ) -> "MemorySpaceFields":
        """Subfields should come from the MemorySpaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MemorySpaceFields":
        self._alias = alias
        return self


class UserFields(GraphQLField):
    id: "UserGraphQLField" = UserGraphQLField("id")
    auth_id: "UserGraphQLField" = UserGraphQLField("authId")
    at_name: "UserGraphQLField" = UserGraphQLField("atName")
    name: "UserGraphQLField" = UserGraphQLField("name")
    avatar_url: "UserGraphQLField" = UserGraphQLField("avatarUrl")

    @classmethod
    def networks(cls) -> "UserNetworkFields":
        return UserNetworkFields("networks")

    def fields(
        self, *subfields: Union[UserGraphQLField, "UserNetworkFields"]
    ) -> "UserFields":
        """Subfields should come from the UserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserFields":
        self._alias = alias
        return self


class UserNetworkFields(GraphQLField):
    network: "UserNetworkGraphQLField" = UserNetworkGraphQLField("network")

    def fields(self, *subfields: UserNetworkGraphQLField) -> "UserNetworkFields":
        """Subfields should come from the UserNetworkFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserNetworkFields":
        self._alias = alias
        return self


class VersionFields(GraphQLField):
    id: "VersionGraphQLField" = VersionGraphQLField("id")
    deployment_id: "VersionGraphQLField" = VersionGraphQLField("deploymentId")
    environment_id: "VersionGraphQLField" = VersionGraphQLField("environmentId")
    commit_hash: "VersionGraphQLField" = VersionGraphQLField("commitHash")
    commit_message: "VersionGraphQLField" = VersionGraphQLField("commitMessage")
    is_manual: "VersionGraphQLField" = VersionGraphQLField("isManual")
    status: "VersionGraphQLField" = VersionGraphQLField("status")
    server_url: "VersionGraphQLField" = VersionGraphQLField("serverUrl")

    def fields(self, *subfields: VersionGraphQLField) -> "VersionFields":
        """Subfields should come from the VersionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VersionFields":
        self._alias = alias
        return self
