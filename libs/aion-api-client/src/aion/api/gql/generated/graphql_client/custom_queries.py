# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    AgentBehaviorFields,
    AgentEnvironmentFields,
    AgentIdentityFields,
    DeploymentFields,
    MemorySpaceFields,
    UserFields,
)


class Query:
    @classmethod
    def user(cls, user_id: str) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "userId": {"type": "ID!", "value": user_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="user", arguments=cleared_arguments)

    @classmethod
    def memory_spaces(cls) -> MemorySpaceFields:
        return MemorySpaceFields(field_name="memorySpaces")

    @classmethod
    def agent_identities(cls) -> AgentIdentityFields:
        return AgentIdentityFields(field_name="agentIdentities")

    @classmethod
    def agent_identity(cls, agent_identity_id: str) -> AgentIdentityFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "agentIdentityId": {"type": "ID!", "value": agent_identity_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AgentIdentityFields(
            field_name="agentIdentity", arguments=cleared_arguments
        )

    @classmethod
    def agent_behaviors(cls) -> AgentBehaviorFields:
        return AgentBehaviorFields(field_name="agentBehaviors")

    @classmethod
    def agent_behavior(cls, agent_behavior_id: str) -> AgentBehaviorFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "agentBehaviorId": {"type": "ID!", "value": agent_behavior_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AgentBehaviorFields(
            field_name="agentBehavior", arguments=cleared_arguments
        )

    @classmethod
    def agent_environments(cls) -> AgentEnvironmentFields:
        return AgentEnvironmentFields(field_name="agentEnvironments")

    @classmethod
    def agent_environment(cls, agent_environment_id: str) -> AgentEnvironmentFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "agentEnvironmentId": {"type": "ID!", "value": agent_environment_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AgentEnvironmentFields(
            field_name="agentEnvironment", arguments=cleared_arguments
        )

    @classmethod
    def deployments(cls) -> DeploymentFields:
        return DeploymentFields(field_name="deployments")

    @classmethod
    def deployment(cls, deployment_id: str) -> DeploymentFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "deploymentId": {"type": "ID!", "value": deployment_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentFields(field_name="deployment", arguments=cleared_arguments)
