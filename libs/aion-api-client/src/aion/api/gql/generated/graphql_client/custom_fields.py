# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from .base_operation import GraphQLField
from .custom_typing_fields import (
    AgentBehaviorGraphQLField,
    AgentEnvironmentGraphQLField,
    AgentIdentityGraphQLField,
    AssetBalanceGraphQLField,
    AssetGraphQLField,
    AssetPriceGraphQLField,
    BranchOptionGraphQLField,
    ClientSecretGraphQLField,
    ClientSecretHashGraphQLField,
    CreateLocalDeploymentResponseGraphQLField,
    DeploymentDetailGraphQLField,
    DeploymentEnvironmentGraphQLField,
    DeploymentGraphQLField,
    JSONRPCErrorGraphQLField,
    JSONRPCErrorResponseGraphQLField,
    JSONRPCSuccessResponseGraphQLField,
    KVStringStringGraphQLField,
    MemorySpaceGraphQLField,
    RepositoryGraphQLField,
    RepositoryOptionGraphQLField,
    TokenIconUrlsGraphQLField,
    TransactionGraphQLField,
    UserGraphQLField,
    UserNetworkGraphQLField,
    VersionGraphQLField,
    WalletStateGraphQLField,
    WalletStateWithPricesGraphQLField,
)


class AgentBehaviorFields(GraphQLField):
    id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField("id")
    user_id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField("userId")
    deployment_type: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField(
        "deploymentType"
    )
    deployment_id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField(
        "deploymentId"
    )
    version_id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField("versionId")
    assistant_id: "AgentBehaviorGraphQLField" = AgentBehaviorGraphQLField("assistantId")

    def fields(self, *subfields: AgentBehaviorGraphQLField) -> "AgentBehaviorFields":
        """Subfields should come from the AgentBehaviorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AgentBehaviorFields":
        self._alias = alias
        return self


class AgentEnvironmentFields(GraphQLField):
    id: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField("id")
    user_id: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField("userId")
    name: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField("name")

    @classmethod
    def configuration_variables(cls) -> "KVStringStringFields":
        return KVStringStringFields("configuration_variables")

    use_long_term_memory: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField(
        "useLongTermMemory"
    )
    system_prompt: "AgentEnvironmentGraphQLField" = AgentEnvironmentGraphQLField(
        "systemPrompt"
    )

    def fields(
        self, *subfields: Union[AgentEnvironmentGraphQLField, "KVStringStringFields"]
    ) -> "AgentEnvironmentFields":
        """Subfields should come from the AgentEnvironmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AgentEnvironmentFields":
        self._alias = alias
        return self


class AgentIdentityFields(GraphQLField):
    id: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("id")
    agent_type: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("agentType")
    user_id: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("userId")
    organization_id: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField(
        "organizationId"
    )
    at_name: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("atName")
    biography: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField("biography")
    avatar_image_url: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField(
        "avatarImageUrl"
    )
    background_image_url: "AgentIdentityGraphQLField" = AgentIdentityGraphQLField(
        "backgroundImageUrl"
    )

    def fields(self, *subfields: AgentIdentityGraphQLField) -> "AgentIdentityFields":
        """Subfields should come from the AgentIdentityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AgentIdentityFields":
        self._alias = alias
        return self


class AssetFields(GraphQLField):
    id: "AssetGraphQLField" = AssetGraphQLField("id")
    symbol: "AssetGraphQLField" = AssetGraphQLField("symbol")
    name: "AssetGraphQLField" = AssetGraphQLField("name")

    @classmethod
    def icon_urls(cls) -> "TokenIconUrlsFields":
        return TokenIconUrlsFields("icon_urls")

    address: "AssetGraphQLField" = AssetGraphQLField("address")
    network: "AssetGraphQLField" = AssetGraphQLField("network")
    decimals: "AssetGraphQLField" = AssetGraphQLField("decimals")
    kind: "AssetGraphQLField" = AssetGraphQLField("kind")

    def fields(
        self, *subfields: Union[AssetGraphQLField, "TokenIconUrlsFields"]
    ) -> "AssetFields":
        """Subfields should come from the AssetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AssetFields":
        self._alias = alias
        return self


class AssetBalanceFields(GraphQLField):
    @classmethod
    def asset(cls) -> "AssetFields":
        return AssetFields("asset")

    balance: "AssetBalanceGraphQLField" = AssetBalanceGraphQLField("balance")

    def fields(
        self, *subfields: Union[AssetBalanceGraphQLField, "AssetFields"]
    ) -> "AssetBalanceFields":
        """Subfields should come from the AssetBalanceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AssetBalanceFields":
        self._alias = alias
        return self


class AssetPriceFields(GraphQLField):
    @classmethod
    def asset(cls) -> "AssetFields":
        return AssetFields("asset")

    value: "AssetPriceGraphQLField" = AssetPriceGraphQLField("value")
    currency: "AssetPriceGraphQLField" = AssetPriceGraphQLField("currency")

    def fields(
        self, *subfields: Union[AssetPriceGraphQLField, "AssetFields"]
    ) -> "AssetPriceFields":
        """Subfields should come from the AssetPriceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AssetPriceFields":
        self._alias = alias
        return self


class BranchOptionFields(GraphQLField):
    name: "BranchOptionGraphQLField" = BranchOptionGraphQLField("name")

    def fields(self, *subfields: BranchOptionGraphQLField) -> "BranchOptionFields":
        """Subfields should come from the BranchOptionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BranchOptionFields":
        self._alias = alias
        return self


class ClientSecretFields(GraphQLField):
    client_id: "ClientSecretGraphQLField" = ClientSecretGraphQLField("clientId")
    secret: "ClientSecretGraphQLField" = ClientSecretGraphQLField("secret")

    def fields(self, *subfields: ClientSecretGraphQLField) -> "ClientSecretFields":
        """Subfields should come from the ClientSecretFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClientSecretFields":
        self._alias = alias
        return self


class ClientSecretHashFields(GraphQLField):
    id: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField("id")
    client_id: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField("clientId")
    secret_hash: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField(
        "secretHash"
    )
    subject_type: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField(
        "subjectType"
    )
    subject_id: "ClientSecretHashGraphQLField" = ClientSecretHashGraphQLField(
        "subjectId"
    )

    def fields(
        self, *subfields: ClientSecretHashGraphQLField
    ) -> "ClientSecretHashFields":
        """Subfields should come from the ClientSecretHashFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ClientSecretHashFields":
        self._alias = alias
        return self


class CreateLocalDeploymentResponseFields(GraphQLField):
    @classmethod
    def deployment(cls) -> "DeploymentFields":
        return DeploymentFields("deployment")

    @classmethod
    def environment(cls) -> "DeploymentEnvironmentFields":
        return DeploymentEnvironmentFields("environment")

    @classmethod
    def version(cls) -> "VersionFields":
        return VersionFields("version")

    @classmethod
    def client_secret_hash(cls) -> "ClientSecretHashFields":
        return ClientSecretHashFields("client_secret_hash")

    @classmethod
    def client_secret(cls) -> "ClientSecretFields":
        return ClientSecretFields("client_secret")

    def fields(
        self,
        *subfields: Union[
            CreateLocalDeploymentResponseGraphQLField,
            "ClientSecretFields",
            "ClientSecretHashFields",
            "DeploymentEnvironmentFields",
            "DeploymentFields",
            "VersionFields",
        ]
    ) -> "CreateLocalDeploymentResponseFields":
        """Subfields should come from the CreateLocalDeploymentResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateLocalDeploymentResponseFields":
        self._alias = alias
        return self


class DeploymentFields(GraphQLField):
    id: "DeploymentGraphQLField" = DeploymentGraphQLField("id")
    organization_id: "DeploymentGraphQLField" = DeploymentGraphQLField("organizationId")
    user_id: "DeploymentGraphQLField" = DeploymentGraphQLField("userId")
    repository_id: "DeploymentGraphQLField" = DeploymentGraphQLField("repositoryId")
    name: "DeploymentGraphQLField" = DeploymentGraphQLField("name")
    deployment_type: "DeploymentGraphQLField" = DeploymentGraphQLField("deploymentType")
    source_root: "DeploymentGraphQLField" = DeploymentGraphQLField("sourceRoot")
    has_auto_version_enabled: "DeploymentGraphQLField" = DeploymentGraphQLField(
        "hasAutoVersionEnabled"
    )

    def fields(self, *subfields: DeploymentGraphQLField) -> "DeploymentFields":
        """Subfields should come from the DeploymentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentFields":
        self._alias = alias
        return self


class DeploymentDetailFields(GraphQLField):
    id: "DeploymentDetailGraphQLField" = DeploymentDetailGraphQLField("id")

    @classmethod
    def deployment(cls) -> "DeploymentFields":
        return DeploymentFields("deployment")

    @classmethod
    def environments(cls) -> "DeploymentEnvironmentFields":
        return DeploymentEnvironmentFields("environments")

    @classmethod
    def versions(cls) -> "VersionFields":
        return VersionFields("versions")

    @classmethod
    def repository(cls) -> "RepositoryFields":
        return RepositoryFields("repository")

    def fields(
        self,
        *subfields: Union[
            DeploymentDetailGraphQLField,
            "DeploymentEnvironmentFields",
            "DeploymentFields",
            "RepositoryFields",
            "VersionFields",
        ]
    ) -> "DeploymentDetailFields":
        """Subfields should come from the DeploymentDetailFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentDetailFields":
        self._alias = alias
        return self


class DeploymentEnvironmentFields(GraphQLField):
    id: "DeploymentEnvironmentGraphQLField" = DeploymentEnvironmentGraphQLField("id")
    deployment_id: "DeploymentEnvironmentGraphQLField" = (
        DeploymentEnvironmentGraphQLField("deploymentId")
    )
    name: "DeploymentEnvironmentGraphQLField" = DeploymentEnvironmentGraphQLField(
        "name"
    )
    branch: "DeploymentEnvironmentGraphQLField" = DeploymentEnvironmentGraphQLField(
        "branch"
    )

    @classmethod
    def environment_variables(cls) -> "KVStringStringFields":
        return KVStringStringFields("environment_variables")

    def fields(
        self,
        *subfields: Union[DeploymentEnvironmentGraphQLField, "KVStringStringFields"]
    ) -> "DeploymentEnvironmentFields":
        """Subfields should come from the DeploymentEnvironmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeploymentEnvironmentFields":
        self._alias = alias
        return self


class JSONRPCErrorFields(GraphQLField):
    code: "JSONRPCErrorGraphQLField" = JSONRPCErrorGraphQLField("code")
    message: "JSONRPCErrorGraphQLField" = JSONRPCErrorGraphQLField("message")
    data: "JSONRPCErrorGraphQLField" = JSONRPCErrorGraphQLField("data")

    def fields(self, *subfields: JSONRPCErrorGraphQLField) -> "JSONRPCErrorFields":
        """Subfields should come from the JSONRPCErrorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JSONRPCErrorFields":
        self._alias = alias
        return self


class JSONRPCErrorResponseFields(GraphQLField):
    id: "JSONRPCErrorResponseGraphQLField" = JSONRPCErrorResponseGraphQLField("id")

    @classmethod
    def error(cls) -> "JSONRPCErrorFields":
        return JSONRPCErrorFields("error")

    def fields(
        self, *subfields: Union[JSONRPCErrorResponseGraphQLField, "JSONRPCErrorFields"]
    ) -> "JSONRPCErrorResponseFields":
        """Subfields should come from the JSONRPCErrorResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JSONRPCErrorResponseFields":
        self._alias = alias
        return self


class JSONRPCSuccessResponseFields(GraphQLField):
    id: "JSONRPCSuccessResponseGraphQLField" = JSONRPCSuccessResponseGraphQLField("id")
    result: "JSONRPCSuccessResponseGraphQLField" = JSONRPCSuccessResponseGraphQLField(
        "result"
    )

    def fields(
        self, *subfields: JSONRPCSuccessResponseGraphQLField
    ) -> "JSONRPCSuccessResponseFields":
        """Subfields should come from the JSONRPCSuccessResponseFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JSONRPCSuccessResponseFields":
        self._alias = alias
        return self


class KVStringStringFields(GraphQLField):
    key: "KVStringStringGraphQLField" = KVStringStringGraphQLField("key")
    value: "KVStringStringGraphQLField" = KVStringStringGraphQLField("value")

    def fields(self, *subfields: KVStringStringGraphQLField) -> "KVStringStringFields":
        """Subfields should come from the KVStringStringFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "KVStringStringFields":
        self._alias = alias
        return self


class MemorySpaceFields(GraphQLField):
    id: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("id")
    name: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("name")
    description: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("description")
    instructions: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("instructions")

    @classmethod
    def owner(cls) -> "AgentIdentityFields":
        return AgentIdentityFields("owner")

    privacy: "MemorySpaceGraphQLField" = MemorySpaceGraphQLField("privacy")

    @classmethod
    def shared_with(cls) -> "AgentIdentityFields":
        return AgentIdentityFields("shared_with")

    def fields(
        self, *subfields: Union[MemorySpaceGraphQLField, "AgentIdentityFields"]
    ) -> "MemorySpaceFields":
        """Subfields should come from the MemorySpaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MemorySpaceFields":
        self._alias = alias
        return self


class RepositoryFields(GraphQLField):
    id: "RepositoryGraphQLField" = RepositoryGraphQLField("id")
    git_hub_installation_id: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "gitHubInstallationId"
    )
    github_repo_id: "RepositoryGraphQLField" = RepositoryGraphQLField("githubRepoId")
    git_hub_owner_id: "RepositoryGraphQLField" = RepositoryGraphQLField("gitHubOwnerId")
    git_hub_owner_type: "RepositoryGraphQLField" = RepositoryGraphQLField(
        "gitHubOwnerType"
    )
    name: "RepositoryGraphQLField" = RepositoryGraphQLField("name")
    url: "RepositoryGraphQLField" = RepositoryGraphQLField("url")

    def fields(self, *subfields: RepositoryGraphQLField) -> "RepositoryFields":
        """Subfields should come from the RepositoryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryFields":
        self._alias = alias
        return self


class RepositoryOptionFields(GraphQLField):
    github_repo_id: "RepositoryOptionGraphQLField" = RepositoryOptionGraphQLField(
        "githubRepoId"
    )
    name: "RepositoryOptionGraphQLField" = RepositoryOptionGraphQLField("name")
    description: "RepositoryOptionGraphQLField" = RepositoryOptionGraphQLField(
        "description"
    )
    is_private: "RepositoryOptionGraphQLField" = RepositoryOptionGraphQLField(
        "isPrivate"
    )

    def fields(
        self, *subfields: RepositoryOptionGraphQLField
    ) -> "RepositoryOptionFields":
        """Subfields should come from the RepositoryOptionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RepositoryOptionFields":
        self._alias = alias
        return self


class TokenIconUrlsFields(GraphQLField):
    thumbnail: "TokenIconUrlsGraphQLField" = TokenIconUrlsGraphQLField("thumbnail")
    small: "TokenIconUrlsGraphQLField" = TokenIconUrlsGraphQLField("small")
    large: "TokenIconUrlsGraphQLField" = TokenIconUrlsGraphQLField("large")

    def fields(self, *subfields: TokenIconUrlsGraphQLField) -> "TokenIconUrlsFields":
        """Subfields should come from the TokenIconUrlsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TokenIconUrlsFields":
        self._alias = alias
        return self


class TransactionFields(GraphQLField):
    id: "TransactionGraphQLField" = TransactionGraphQLField("id")
    timestamp: "TransactionGraphQLField" = TransactionGraphQLField("timestamp")
    from_: "TransactionGraphQLField" = TransactionGraphQLField("from")
    to: "TransactionGraphQLField" = TransactionGraphQLField("to")

    @classmethod
    def asset(cls) -> "AssetFields":
        return AssetFields("asset")

    value: "TransactionGraphQLField" = TransactionGraphQLField("value")
    direction: "TransactionGraphQLField" = TransactionGraphQLField("direction")
    status: "TransactionGraphQLField" = TransactionGraphQLField("status")
    block_explorer_url: "TransactionGraphQLField" = TransactionGraphQLField(
        "blockExplorerUrl"
    )

    def fields(
        self, *subfields: Union[TransactionGraphQLField, "AssetFields"]
    ) -> "TransactionFields":
        """Subfields should come from the TransactionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TransactionFields":
        self._alias = alias
        return self


class UserFields(GraphQLField):
    id: "UserGraphQLField" = UserGraphQLField("id")
    auth_id: "UserGraphQLField" = UserGraphQLField("authId")
    at_name: "UserGraphQLField" = UserGraphQLField("atName")
    name: "UserGraphQLField" = UserGraphQLField("name")
    avatar_url: "UserGraphQLField" = UserGraphQLField("avatarUrl")

    @classmethod
    def networks(cls) -> "UserNetworkFields":
        return UserNetworkFields("networks")

    def fields(
        self, *subfields: Union[UserGraphQLField, "UserNetworkFields"]
    ) -> "UserFields":
        """Subfields should come from the UserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserFields":
        self._alias = alias
        return self


class UserNetworkFields(GraphQLField):
    network: "UserNetworkGraphQLField" = UserNetworkGraphQLField("network")

    def fields(self, *subfields: UserNetworkGraphQLField) -> "UserNetworkFields":
        """Subfields should come from the UserNetworkFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserNetworkFields":
        self._alias = alias
        return self


class VersionFields(GraphQLField):
    id: "VersionGraphQLField" = VersionGraphQLField("id")
    deployment_id: "VersionGraphQLField" = VersionGraphQLField("deploymentId")
    environment_id: "VersionGraphQLField" = VersionGraphQLField("environmentId")
    commit_hash: "VersionGraphQLField" = VersionGraphQLField("commitHash")
    commit_message: "VersionGraphQLField" = VersionGraphQLField("commitMessage")
    is_manual: "VersionGraphQLField" = VersionGraphQLField("isManual")
    status: "VersionGraphQLField" = VersionGraphQLField("status")
    server_url: "VersionGraphQLField" = VersionGraphQLField("serverUrl")
    client_id: "VersionGraphQLField" = VersionGraphQLField("client_id")

    def fields(self, *subfields: VersionGraphQLField) -> "VersionFields":
        """Subfields should come from the VersionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VersionFields":
        self._alias = alias
        return self


class WalletStateFields(GraphQLField):
    address: "WalletStateGraphQLField" = WalletStateGraphQLField("address")

    @classmethod
    def assets(cls) -> "AssetBalanceFields":
        return AssetBalanceFields("assets")

    @classmethod
    def recent_transactions(cls) -> "TransactionFields":
        return TransactionFields("recent_transactions")

    def fields(
        self,
        *subfields: Union[
            WalletStateGraphQLField, "AssetBalanceFields", "TransactionFields"
        ]
    ) -> "WalletStateFields":
        """Subfields should come from the WalletStateFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WalletStateFields":
        self._alias = alias
        return self


class WalletStateWithPricesFields(GraphQLField):
    @classmethod
    def wallet_state(cls) -> "WalletStateFields":
        return WalletStateFields("wallet_state")

    total_usd_value: "WalletStateWithPricesGraphQLField" = (
        WalletStateWithPricesGraphQLField("totalUsdValue")
    )

    @classmethod
    def asset_prices(cls) -> "AssetPriceFields":
        return AssetPriceFields("asset_prices")

    def fields(
        self,
        *subfields: Union[
            WalletStateWithPricesGraphQLField, "AssetPriceFields", "WalletStateFields"
        ]
    ) -> "WalletStateWithPricesFields":
        """Subfields should come from the WalletStateWithPricesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WalletStateWithPricesFields":
        self._alias = alias
        return self
