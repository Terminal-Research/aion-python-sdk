# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    AgentBehaviorFields,
    AgentEnvironmentFields,
    AgentIdentityFields,
    CreateLocalDeploymentResponseFields,
    DeploymentDetailFields,
    DeploymentEnvironmentFields,
)
from .custom_typing_fields import GraphQLField, JSONRPCResponseUnion
from .input_types import JSONRPCRequestInput


class Mutation:
    @classmethod
    def update_agent_identity(
        cls,
        agent_identity_id: str,
        *,
        at_name: Optional[str] = None,
        biography: Optional[str] = None,
        avatar_image_url: Optional[str] = None,
        background_image_url: Optional[str] = None
    ) -> AgentIdentityFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "agentIdentityId": {"type": "ID!", "value": agent_identity_id},
            "atName": {"type": "String", "value": at_name},
            "biography": {"type": "String", "value": biography},
            "avatarImageUrl": {"type": "String", "value": avatar_image_url},
            "backgroundImageUrl": {"type": "String", "value": background_image_url},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AgentIdentityFields(
            field_name="updateAgentIdentity", arguments=cleared_arguments
        )

    @classmethod
    def update_agent_environment(
        cls,
        agent_environment_id: str,
        *,
        name: Optional[str] = None,
        configuration_variables: Optional[Any] = None,
        use_long_term_memory: Optional[bool] = None,
        system_prompt: Optional[str] = None
    ) -> AgentEnvironmentFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "agentEnvironmentId": {"type": "ID!", "value": agent_environment_id},
            "name": {"type": "String", "value": name},
            "configurationVariables": {
                "type": "Json",
                "value": configuration_variables,
            },
            "useLongTermMemory": {"type": "Boolean", "value": use_long_term_memory},
            "systemPrompt": {"type": "String", "value": system_prompt},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AgentEnvironmentFields(
            field_name="updateAgentEnvironment", arguments=cleared_arguments
        )

    @classmethod
    def create_local_deployment(
        cls, name: str, server_url: str
    ) -> CreateLocalDeploymentResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name},
            "serverUrl": {"type": "String!", "value": server_url},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateLocalDeploymentResponseFields(
            field_name="createLocalDeployment", arguments=cleared_arguments
        )

    @classmethod
    def create_git_hub_deployment(
        cls,
        name: str,
        has_auto_version_enabled: bool,
        git_hub_installation_id: Any,
        github_repo_id: Any,
        *,
        source_root: Optional[str] = None
    ) -> DeploymentDetailFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name},
            "sourceRoot": {"type": "String", "value": source_root},
            "hasAutoVersionEnabled": {
                "type": "Boolean!",
                "value": has_auto_version_enabled,
            },
            "gitHubInstallationId": {"type": "Long!", "value": git_hub_installation_id},
            "githubRepoId": {"type": "Long!", "value": github_repo_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentDetailFields(
            field_name="createGitHubDeployment", arguments=cleared_arguments
        )

    @classmethod
    def update_git_hub_deployment(
        cls,
        deployment_id: str,
        name: str,
        has_auto_version_enabled: bool,
        git_hub_installation_id: Any,
        github_repo_id: Any,
        *,
        source_root: Optional[str] = None
    ) -> DeploymentDetailFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "deploymentId": {"type": "ID!", "value": deployment_id},
            "name": {"type": "String!", "value": name},
            "sourceRoot": {"type": "String", "value": source_root},
            "hasAutoVersionEnabled": {
                "type": "Boolean!",
                "value": has_auto_version_enabled,
            },
            "gitHubInstallationId": {"type": "Long!", "value": git_hub_installation_id},
            "githubRepoId": {"type": "Long!", "value": github_repo_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentDetailFields(
            field_name="updateGitHubDeployment", arguments=cleared_arguments
        )

    @classmethod
    def delete_deployment(cls, deployment_id: str) -> GraphQLField:
        arguments: Dict[str, Dict[str, Any]] = {
            "deploymentId": {"type": "ID!", "value": deployment_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GraphQLField(field_name="deleteDeployment", arguments=cleared_arguments)

    @classmethod
    def create_or_update_deployment_environment(
        cls,
        deployment_id: str,
        *,
        deployment_environment_id: Optional[str] = None,
        branch: Optional[str] = None,
        environmental_variables: Optional[Any] = None
    ) -> DeploymentEnvironmentFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "deploymentId": {"type": "ID!", "value": deployment_id},
            "deploymentEnvironmentId": {
                "type": "ID",
                "value": deployment_environment_id,
            },
            "branch": {"type": "String", "value": branch},
            "environmentalVariables": {
                "type": "Json",
                "value": environmental_variables,
            },
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeploymentEnvironmentFields(
            field_name="createOrUpdateDeploymentEnvironment",
            arguments=cleared_arguments,
        )

    @classmethod
    def a_2_a_send(
        cls, request: JSONRPCRequestInput, distribution_id: str
    ) -> JSONRPCResponseUnion:
        arguments: Dict[str, Dict[str, Any]] = {
            "request": {"type": "JSONRPCRequestInput!", "value": request},
            "distributionId": {"type": "ID!", "value": distribution_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return JSONRPCResponseUnion(field_name="a2aSend", arguments=cleared_arguments)

    @classmethod
    def register_version(cls, configuration: str) -> AgentBehaviorFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "configuration": {"type": "String!", "value": configuration}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AgentBehaviorFields(
            field_name="registerVersion", arguments=cleared_arguments
        )
